<!DOCTYPE html>
<html lang="en">
<head>
    <meta name="google" content="notranslate">
    <meta charset="UTF-8">
    <title>Infinite Outsourcing System</title>
    <link href="~/favicon.ico" rel="shortcut icon">
    <link href="~/css/site.css" rel="stylesheet" />
    <link href="~/css/web-i13hnk8_.css" rel="stylesheet" />
    <link href="~/css/contactus/contactoffices-d6pf6t9t.css" rel="stylesheet" />
    <link href="~/css/Custom-header.css" rel="stylesheet" />
    <link href="~/css/Industries_Style.css" rel="stylesheet"/>
</head>
<body class="page-template page-template-template-data page-template-template-data-php page page-id-13 page-data-strategy">

    <partial name="_MenuBar" />
    <div class="page-wrapper">
        @RenderBody()

        <div id="webgl_home4" class="background"></div>
        <div class="footer-container" id="footer">
            <footer class="main-footer" id="mainFooter">
                <canvas id="webgl-canvas"></canvas>

                <div class="footer-fixed-content" id="footerAnimation">
                    <div class="footer-animated-title" id="footerTitle">
                        <!-- Spans for each char -->
                        <span class="char">I</span><span class="char">n</span><span class="char">f</span><span class="char">i</span><span class="char">n</span><span class="char">i</span><span class="char">t</span><span class="char">e</span>
                        <span class="char">O</span><span class="char">u</span><span class="char">t</span><span class="char">s</span><span class="char">o</span><span class="char">u</span><span class="char">r</span><span class="char">c</span><span class="char">i</span><span class="char">n</span><span class="char">g</span><span class="char">.</span><br>
                        <span class="char">U</span><span class="char">n</span><span class="char">l</span><span class="char">i</span><span class="char">m</span><span class="char">i</span><span class="char">t</span><span class="char">e</span><span class="char">d</span>
                        <span class="char">G</span><span class="char">r</span><span class="char">o</span><span class="char">w</span><span class="char">t</span><span class="char">h</span><span class="char">.</span>
                    </div>

                    <div class="footer-content container container--small container--center" id="footerRestContent">
                        <p>
                            <span class="footer-word">3040</span>
                            <span class="footer-word">Post</span>
                            <span class="footer-word">Oak</span>
                            <span class="footer-word">blvd,</span>
                            <span class="footer-word">Floor</span>
                            <span class="footer-word">18,</span>
                            <span class="footer-word">Houston,</span>
                            <span class="footer-word">TX</span>
                            <span class="footer-word"><a href="tel:+16472475490" target="_blank" rel="noopener">+1 (647) 247-5490</a></span>
                            <span class="footer-word">|</span>
                            <span class="footer-word">contact@infiniteos.com</span>
                        </p>
                    </div>
                    <ul id="footerBottomLinks" class="social">
                        <li><a href="#" onclick="GoToURL('/Home/Privacy')" class="footer-links" style="width:85px;color:white;">Privacy Policy</a></li>
                        <li class="text-white opacity-50 fs-14">|</li>
                        <li><a href="#" onclick="GoToURL('/Home/Terms')" class="footer-links" style="width:120px;color:white;">Terms &amp; Conditions</a></li>
                    </ul>
                </div>
            </footer>
        </div>
    </div>



    @await RenderSectionAsync("Scripts", required: false)
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const contentSections = document.querySelectorAll('.timeline-content-section');
            const navYears = document.querySelectorAll('.timeline-year');
            const timelineIndicator = document.getElementById('timelineIndicator');
            const timelineNavSidebar = document.getElementById('timelineNavSidebar'); // Get sidebar element
            const timelineLineTrack = document.getElementById('timelineLineTrack'); // Get line element
            const mainFooter = document.getElementById('mainFooter'); // Get footer element

            function updateTimeline() {
                let currentActiveSection = null;
                const viewportCenter = window.innerHeight / 2;

                // --- Determine Active Section ---
                contentSections.forEach(section => {
                    const rect = section.getBoundingClientRect();
                    if (rect.top <= viewportCenter && rect.bottom >= viewportCenter) {
                        currentActiveSection = section;
                    }
                });

                // Fallback: Closest section to center
                if (!currentActiveSection) {
                    let minDistance = Infinity;
                    contentSections.forEach(section => {
                        const rect = section.getBoundingClientRect();
                        const sectionCenter = rect.top + rect.height / 2;
                        const distance = Math.abs(viewportCenter - sectionCenter);
                        if (distance < minDistance) {
                            minDistance = distance;
                            currentActiveSection = section;
                        }
                    });
                }

                // Handle very top or very bottom of scroll
                const firstSection = contentSections[0];
                const lastSection = contentSections[contentSections.length - 1];

                        if (window.scrollY < firstSection.offsetTop - (window.innerHeight * 0.2)) {
            currentActiveSection = firstSection;
        } else {
            const lastRect = lastSection.getBoundingClientRect();
            const isLastVisible = lastRect.top <= viewportCenter && lastRect.bottom >= viewportCenter;

            if (isLastVisible) {
                currentActiveSection = lastSection;
            }
        }


                // --- Update Active Classes & Indicator ---
                contentSections.forEach(section => {
                    section.classList.remove('active');
                });
                navYears.forEach(year => {
                    year.classList.remove('active');
                });

                if (currentActiveSection) {
                    currentActiveSection.classList.add('active');
                    const activeYearData = currentActiveSection.dataset.year;
                    const activeNavYear = document.querySelector(`.timeline-year[data-year="${activeYearData}"]`);

                    if (activeNavYear) {
                        activeNavYear.classList.add('active');

                        const navYearRect = activeNavYear.getBoundingClientRect();
                        const sidebarRect = timelineNavSidebar.getBoundingClientRect();

                        const indicatorTop = (navYearRect.top - sidebarRect.top) + (navYearRect.height / 2);
                        timelineIndicator.style.top = `${indicatorTop}px`;
                    }
                }

                // --- Handle Sidebar Height based on Footer ---
                const footerRect = mainFooter.getBoundingClientRect();
                const sidebarRect = timelineNavSidebar.getBoundingClientRect();
                const scrollY = window.scrollY;

                // When the footer starts to appear in the viewport (or even slightly before)
                // We want the sidebar to shrink or "lift up" with the scroll
                const footerThreshold = window.innerHeight; // When footer bottom is this far from viewport top
                const footerDistanceToViewportTop = footerRect.top; // Distance of footer's top edge from viewport top

                // Calculate how much sidebar should shrink
                // If footer top is below window height, sidebar height is full.
                // As footer top comes up (gets smaller), sidebar height shrinks.
                let newSidebarHeight = '100vh';
                let newLineHeight = 'calc(100% - 12rem)';

                // If footer's top edge is within the viewport
                if (footerDistanceToViewportTop < window.innerHeight) {
                    // Calculate remaining space above footer
                    // Max height should be `footerRect.top` (distance from top of viewport to footer top)
                    // We also need to consider the `top` padding of the sidebar.
                    const availableSpace = footerDistanceToViewportTop;
                    const sidebarTopPadding = parseFloat(getComputedStyle(timelineNavSidebar).paddingTop);
                    const sidebarBottomPadding = parseFloat(getComputedStyle(timelineNavSidebar).paddingBottom);

                    // Ensure sidebar doesn't go below its top padding or zero height
                    newSidebarHeight = Math.max(sidebarTopPadding + sidebarBottomPadding, availableSpace); // + 50 for some buffer at the bottom
                    newLineHeight = Math.max(0, availableSpace - sidebarTopPadding - sidebarBottomPadding);

                    // Convert to pixels for setting style directly
                    newSidebarHeight = `${newSidebarHeight}px`;
                    newLineHeight = `${newLineHeight}px`;

                    // Also make sure the sidebar itself doesn't start moving up if its top is above the viewport
                    if (sidebarRect.top < 0) {
                       timelineNavSidebar.style.top = `${scrollY}px`; // Make it scroll with the content if its fixed point is no longer top of viewport
                    } else {
                       timelineNavSidebar.style.top = '0'; // Keep it fixed at the top
                    }

                            // Shrink + fade effect when footer is in view
        const fadeThreshold = 300; // How many px above footer it starts fading
        const disappearThreshold = 100; // Fully hidden when footer top is 100px from top

        let opacity = 1;
        let scale = 1;

        if (footerDistanceToViewportTop < fadeThreshold) {
            const fadeRatio = Math.max(0, (footerDistanceToViewportTop - disappearThreshold) / (fadeThreshold - disappearThreshold));
            opacity = fadeRatio;
            scale = 0.8 + (fadeRatio * 0.2); // Shrinks from 1 to 0.8
        }

        timelineNavSidebar.style.opacity = opacity;
        timelineNavSidebar.style.transform = `scale(${scale})`;
        timelineNavSidebar.style.transformOrigin = 'top center';
        timelineNavSidebar.style.transition = 'transform 0.3s ease, opacity 0.3s ease';
                } else {
                    timelineNavSidebar.style.top = '0'; // Reset top if footer is not in view
                }

                timelineNavSidebar.style.height = newSidebarHeight;
                timelineLineTrack.style.height = newLineHeight;

                // Adjust the height of the header logo as well if it's supposed to stick with the menu
                // However, header-logo is outside timelineNavSidebar, so it needs its own logic if it should also shrink.
                // For now, it stays fixed.
            }

                    const secondSection = document.querySelector('.second-section');

        function toggleSidebarVisibility() {
                    const rect = secondSection.getBoundingClientRect();
        const inViewOrBelow = rect.top <= 155 && rect.bottom > 0;

        if (inViewOrBelow || window.scrollY >= secondSection.offsetTop) {
            timelineNavSidebar.style.display = 'block';
        } else {
            timelineNavSidebar.style.display = 'none';
        }
        }
            // Click listener for navigation years
            navYears.forEach(yearNav => {
                yearNav.addEventListener('click', () => {
                    const sectionId = yearNav.dataset.sectionId;
                    const targetSection = document.getElementById(sectionId);
                    if (targetSection) {
                        const offset = (window.innerHeight - targetSection.offsetHeight) / 2;
                        window.scrollTo({
                            top: targetSection.offsetTop - offset,
                            behavior: 'smooth'
                        });
                    }
                });
            });

            // Event listeners
                    window.addEventListener('scroll', () => {
            updateTimeline();
            toggleSidebarVisibility();
        });

        window.addEventListener('resize', () => {
            updateTimeline();
            toggleSidebarVisibility();
        }); // Update on resize to handle layout changes

            // Initial call on page load
            updateTimeline();
            toggleSidebarVisibility();
        });
                               document.addEventListener("DOMContentLoaded", () => {
            const footer = document.getElementById("footer");
            const footerContainer = document.querySelector(".footer-container");
            const chars = footer.querySelectorAll(".char");
            const words = document.querySelectorAll("#footerRestContent .footer-word");
            const footerLinks = document.getElementById("footerBottomLinks");

            const triggerCharIndex = Array.from(chars).findIndex(char => char.textContent.trim() === "G");

            function animateFooter() {
                const windowHeight = window.innerHeight;
                const containerTop = footerContainer.getBoundingClientRect().top;
                const footerBottom = footer.getBoundingClientRect().bottom;

                const start = windowHeight * 0.1;
                const end = windowHeight;
                const totalDistance = end - start;
                const currentDistance = footerBottom - end;

                if (containerTop > start) {
                    // Reset states before animation
                    chars.forEach(char => {
                        char.style.color = "#2a1f53";
                        char.style.opacity = "1";
                    });
                    words.forEach(word => {
                        word.style.opacity = "0";
                        word.style.visibility = "hidden";
                    });
                    footerLinks.style.opacity = "0";
                    return;
                }

                const progress = Math.max(0, Math.min(1, 1 - currentDistance / totalDistance));
                const totalChars = chars.length;
                const visibleChars = Math.floor(progress * totalChars);

                // Animate header letters
                chars.forEach((char, i) => {
                    char.style.opacity = "1";
                    char.style.color = i <= visibleChars ? "white" : "#2a1f53";
                });

                // Animate footer words from 'G' of Growth
                if (visibleChars >= triggerCharIndex) {
                    const subProgress = (visibleChars - triggerCharIndex) / (totalChars - triggerCharIndex);
                    const visibleWords = Math.floor(subProgress * words.length);
                    words.forEach((word, i) => {
                        if (i <= visibleWords) {
                            word.style.opacity = "1";
                            word.style.visibility = "visible";
                        } else {
                            word.style.opacity = "0";
                            word.style.visibility = "hidden";
                        }
                    });
                        } else {
            words.forEach(word => {
                word.style.opacity = "0";
                word.style.visibility = "hidden";
            });
        }

                // Fade in footer links at end
                footerLinks.style.opacity = progress >= 0.98 ? "1" : "0";
            }

            window.addEventListener("scroll", animateFooter);
            window.addEventListener("resize", animateFooter);
            animateFooter();
        });


    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="~/js/site.js"></script>
</body>
</html>
