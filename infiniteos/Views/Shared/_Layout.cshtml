<!DOCTYPE html>
<html lang="en">
<head>

    <meta name="google" content="notranslate">
    <meta charset="UTF-8">
    <title>Infinite Outsourcing System</title>
    <link href="~/favicon.ico" rel="shortcut icon">
    <link href="~/css/style1.css" rel="stylesheet">
    <link href="~/css/site.css" rel="stylesheet" />
    <style>
        body {
            height: 2000px; /* To enable scrolling */
        }

        #scrollUpBtn {
            position: fixed;
            bottom: 40px;
            right: 40px;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>


    @RenderBody()


    @Html.Partial("_MenuBar")



    <script charset="utf-8" type="text/javascript" src="~/js/v2.js"></script>
    <script type="text/javascript" src="~/js/vendor.min.js" id="vendor-script" data-no-reload></script>
    <script type="text/javascript" src="~/js/app.min.js" id="main-script" data-no-reload></script>
    @await RenderSectionAsync("Scripts", required: false)
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        const canvas = document.getElementById('webgl-canvas');
        const ctx = canvas.getContext('2d');
        const footer = document.getElementById('footer');

        let time = 0;
        const rings = [];

        function resizeCanvas() {
          const rect = footer.getBoundingClientRect();
          canvas.width = rect.width;
          canvas.height = rect.height;
          setupRings();
        }

        function setupRings() {
          rings.length = 0; // clear old
          const centerX = canvas.width / 2;
          const centerY = canvas.height / 2;
          const maxRadius = Math.sqrt(centerX ** 2 + centerY ** 2);
          const ringSpacing = 45;

          for (let r = ringSpacing; r < maxRadius; r += ringSpacing) {
            rings.push({
              radius: r,
              rotation: Math.random() * Math.PI * 2,
              speed: 0.001 + Math.random() * 0.002, // static speed per ring
            });
          }
        }

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        function draw() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          const centerX = canvas.width / 2;
          const centerY = canvas.height / 2;
          const dotsPerRing = 80;

          time += 0.01;

          rings.forEach((ring, index) => {
            const dynamicRadius = ring.radius + Math.sin(time + index) * 2;
            ring.rotation += ring.speed;

            for (let i = 0; i < dotsPerRing; i++) {
              const angle = (i / dotsPerRing) * Math.PI * 2 + ring.rotation;

              const x = centerX + Math.cos(angle) * dynamicRadius;
              const y = centerY + Math.sin(angle) * dynamicRadius;

              const flicker = Math.sin(time * 2 + i + index);
              const size = 1.5 + flicker * 0.5;
              const opacity = 0.4 + 0.6 * Math.abs(flicker);

              ctx.beginPath();
              ctx.arc(x, y, size, 0, Math.PI * 2);
              ctx.fillStyle = `rgba(6, 147, 227, ${opacity})`;
              ctx.fill();
            }
          });

          requestAnimationFrame(draw);
        }

        draw();
    </script>

</body>
</html>

@* <script>
    const canvas = document.getElementById('webgl-canvas');
     const ctx = canvas.getContext('2d');

    let mouseX = 0, mouseY = 0, scrollY = 0;
    let time = 0;

    function resizeCanvas() {
      canvas.width = canvas.clientWidth;
      canvas.height = canvas.clientHeight;
    }

    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    window.addEventListener('mousemove', (e) => {
      const rect = canvas.getBoundingClientRect();
      mouseX = e.clientX - rect.left;
      //mouseY = e.clientY - rect.top;
    });

    window.addEventListener('scroll', () => {
      scrollY = window.scrollY;
    });

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const centerX = canvas.width / 2;
      const centerY = canvas.height / 2;
      const maxRadius = Math.sqrt(centerX * centerX + centerY * centerY);
      const ringSpacing = 50;
      const dotsPerRing = 50;
      const dotSize = 2;

      time += 0.01;

      for (let r = 0; r < maxRadius; r += ringSpacing) {
        const dynamicRadius = r + Math.sin(time + r * 0.02) * 2;

        for (let i = 0; i < dotsPerRing; i++) {
          const angle = (i / dotsPerRing) * Math.PI * 2 + time * 0.15 + scrollY * 0.0002;

          const x = centerX + Math.cos(angle) * dynamicRadius + (mouseX - centerX) * 0.0005 * dynamicRadius;
          const y = centerY + Math.sin(angle) * dynamicRadius + (mouseY - centerY) * 0.0005 * dynamicRadius;

          ctx.beginPath();
          ctx.arc(x, y, dotSize, 0, 2 * Math.PI);
          ctx.fillStyle = 'rgba(6, 147, 227, 1)';
          ctx.fill();
        }
      }

      requestAnimationFrame(draw);
    }

    draw();
</script> *@
