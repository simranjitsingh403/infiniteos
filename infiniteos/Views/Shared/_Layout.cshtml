<!DOCTYPE html>
<html lang="en">
<head>

    <meta charset="UTF-8">
    <title>Infinite Outsourcing System</title>
    <link href="~/favicon.ico" rel="shortcut icon">
    <link href="~/css/style1.css" rel="stylesheet">
    <link href="~/css/site.css" rel="stylesheet" />

    <link href="~/css/contactus/web-i13hnk8_.css" rel="stylesheet" />

    <style>
        #navBar {
            transition: opacity 0.5s ease;
            opacity: 1;
            pointer-events: auto;
            position: fixed;
            top: 0;
            width: 100%;
        }

            #navBar.hidden {
                opacity: 0;
                pointer-events: none;
            }
    </style>
</head>
<body>


    @RenderBody()


    @Html.Partial("_MenuBar")



    <script charset="utf-8" type="text/javascript" src="~/js/v2.js"></script>
    <script type="text/javascript" src="~/js/vendor.min.js" id="vendor-script" data-no-reload></script>
    @* <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.6.1/gsap.min.js"></script> *@
    <script type="text/javascript" src="~/js/app.min.js" id="main-script" data-no-reload></script>
    @await RenderSectionAsync("Scripts", required: false)
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        const canvas = document.getElementById('webgl-canvas');
        const ctx = canvas.getContext('2d');
        const footer = document.getElementById('footer');

        let time = 0;
        const rings = [];

        function resizeCanvas() {
          const rect = footer.getBoundingClientRect();
          canvas.width = rect.width;
          canvas.height = rect.height;
          setupRings();
        }

        function setupRings() {
          rings.length = 0; // clear old
          const centerX = canvas.width / 2;
          const centerY = canvas.height / 2;
          const maxRadius = Math.sqrt(centerX ** 2 + centerY ** 2);
          const ringSpacing = 45;

          for (let r = ringSpacing; r < maxRadius; r += ringSpacing) {
            rings.push({
              radius: r,
              rotation: Math.random() * Math.PI * 2,
              speed: 0.001 + Math.random() * 0.002, // static speed per ring
            });
          }
        }

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        function draw() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          const centerX = canvas.width / 2;
          const centerY = canvas.height / 2;
          const dotsPerRing = 80;

          time += 0.01;

          rings.forEach((ring, index) => {
            const dynamicRadius = ring.radius + Math.sin(time + index) * 2;
            ring.rotation += ring.speed;

            for (let i = 0; i < dotsPerRing; i++) {
              const angle = (i / dotsPerRing) * Math.PI * 2 + ring.rotation;

              const x = centerX + Math.cos(angle) * dynamicRadius;
              const y = centerY + Math.sin(angle) * dynamicRadius;

              const flicker = Math.sin(time * 2 + i + index);
              const size = 1.5 + flicker * 0.5;
              const opacity = 0.4 + 0.6 * Math.abs(flicker);

              ctx.beginPath();
              ctx.arc(x, y, size, 0, Math.PI * 2);
              ctx.fillStyle = `rgba(6, 147, 227, ${opacity})`;
              ctx.fill();
            }
          });

          requestAnimationFrame(draw);
        }

        draw();
    </script>
    <script>
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!#$%^&*';
        document.querySelectorAll('.jumble-text').forEach(link => {
          const textSpan = link.querySelector('._absoluteText_1mtai_23');
          const originalText = textSpan.textContent;

          link.addEventListener('mouseenter', () => {
            let iterations = 0;
            const interval = setInterval(() => {
              textSpan.textContent = originalText
                .split('')
                .map((char, i) => {
                  if (i < iterations) return originalText[i];
                  return characters[Math.floor(Math.random() * characters.length)];
                })
                .join('');

              iterations += 1 / 2; // speed of resolving
              if (iterations >= originalText.length) {
                clearInterval(interval);
                textSpan.textContent = originalText;
              }
            }, 40); // speed of jumble
          });
        });
    </script>
    <script>
                                           const target = document.getElementById('navBar');
        let lastScrollY = window.scrollY;

        window.addEventListener('wheel', (event) => {
          const currentScrollY = window.scrollY;

          if (event.deltaY > 0) {
            // Scroll down → hide
            target.classList.add('hidden');
          } else {
            // Scroll up → show immediately
            target.classList.remove('hidden');
          }

          lastScrollY = currentScrollY;
        });

    </script>
</body>
</html>


