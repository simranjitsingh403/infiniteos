<!DOCTYPE html>
<html lang="en">
<head>

    <meta name="google" content="notranslate">
    <meta charset="UTF-8">
    <title>Infinite Outsourcing System</title>
    <link href="~/favicon.ico" rel="shortcut icon">
    <link href="~/css/style.css" rel="stylesheet">
    <link href="~/css/site.css" rel="stylesheet" />
    <style>
        .words .words__gradient {
            background: rgb(0,0,0);
            background: -moz-linear-gradient(180deg, rgba(0,0,0,1) 0%,rgba(0,0,0,0.95) 20%, rgba(0,0,0,0.90) 25%,rgba(0,0,0,0.85) 30%,rgba(0,0,0,0.80) 35%, rgba(0,0,0,0) 45%, rgba(0,0,0,0) 55%, rgba(0,0,0,0.80) 65%,rgba(0,0,0,0.85) 70%, rgba(0,0,0,0.90) 75%,rgba(0,0,0,0.95) 80%, rgba(0,0,0,1) 100%);
            background: -webkit-linear-gradient(180deg, rgba(0,0,0,1) 0%,rgba(0,0,0,0.95) 20%, rgba(0,0,0,0.90) 25%,rgba(0,0,0,0.85) 30%,rgba(0,0,0,0.80) 35%, rgba(0,0,0,0) 45%, rgba(0,0,0,0) 55%, rgba(0,0,0,0.80) 65%,rgba(0,0,0,0.85) 70%, rgba(0,0,0,0.90) 75%,rgba(0,0,0,0.95) 80%, rgba(0,0,0,1) 100%);
            background: linear-gradient(180deg, rgba(0,0,0,1) 0%,rgba(0,0,0,0.95) 20%, rgba(0,0,0,0.90) 25%,rgba(0,0,0,0.85) 30%,rgba(0,0,0,0.80) 35%, rgba(0,0,0,0) 45%, rgba(0,0,0,0) 55%, rgba(0,0,0,0.80) 65%,rgba(0,0,0,0.85) 70%, rgba(0,0,0,0.90) 75%,rgba(0,0,0,0.95) 80%, rgba(0,0,0,1) 100%);
            filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#000000",endColorstr="#000000",GradientType=1);
        }
    </style>
</head>
<body class="page-template page-template-template-data page-template-template-data-php page page-id-13 page-data-strategy">


    @RenderBody()


    @Html.Partial("_MenuBar")



    <script charset="utf-8" type="text/javascript" src="~/js/v2.js"></script>
    <script type="text/javascript" src="~/js/vendor.min.js" id="vendor-script" data-no-reload></script>
    <script type="text/javascript" src="~/js/app.min.js" id="main-script" data-no-reload></script>
    @await RenderSectionAsync("Scripts", required: false)
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        const canvas = document.getElementById('webgl-canvas');
        const ctx = canvas.getContext('2d');
        const footer = document.getElementById('footer');

        let time = 0;
        const rings = [];

        function resizeCanvas() {
          const rect = footer.getBoundingClientRect();
          canvas.width = rect.width;
          canvas.height = rect.height;
          setupRings();
        }

        function setupRings() {
          rings.length = 0; // clear old
          const centerX = canvas.width / 2;
          const centerY = canvas.height / 2;
          const maxRadius = Math.sqrt(centerX ** 2 + centerY ** 2);
          const ringSpacing = 45;

          for (let r = ringSpacing; r < maxRadius; r += ringSpacing) {
            rings.push({
              radius: r,
              rotation: Math.random() * Math.PI * 2,
              speed: 0.001 + Math.random() * 0.002, // static speed per ring
            });
          }
        }

        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        function draw() {
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          const centerX = canvas.width / 2;
          const centerY = canvas.height / 2;
          const dotsPerRing = 80;

          time += 0.01;

          rings.forEach((ring, index) => {
            const dynamicRadius = ring.radius + Math.sin(time + index) * 2;
            ring.rotation += ring.speed;

            for (let i = 0; i < dotsPerRing; i++) {
              const angle = (i / dotsPerRing) * Math.PI * 2 + ring.rotation;

              const x = centerX + Math.cos(angle) * dynamicRadius;
              const y = centerY + Math.sin(angle) * dynamicRadius;

              const flicker = Math.sin(time * 2 + i + index);
              const size = 1.5 + flicker * 0.5;
              const opacity = 0.4 + 0.6 * Math.abs(flicker);

              ctx.beginPath();
              ctx.arc(x, y, size, 0, Math.PI * 2);
              ctx.fillStyle = `rgba(6, 147, 227, ${opacity})`;
              ctx.fill();
            }
          });

          requestAnimationFrame(draw);
        }

        draw();
    </script>
</body>
</html>
